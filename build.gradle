plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'com.abcdejoji'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

jacoco {
    toolVersion = '0.8.11'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn 'test'

    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: ["com/abcdejoji/**/*Application*"]
            )
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn 'jacocoTestCoverageVerification'

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 150
            }

            excludes = ["**.*Application*"]
        }
    }
}

asciidoctor {
    dependsOn test

    inputs.dir snippetsDir
}

